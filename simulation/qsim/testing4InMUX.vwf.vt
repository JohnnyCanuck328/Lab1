// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/03/2022 14:17:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    fourMux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fourMux_vlg_sample_tst(
	s0,
	s1,
	uw0,
	uw1,
	uw2,
	uw3,
	sampler_tx
);
input  s0;
input  s1;
input [7:0] uw0;
input [7:0] uw1;
input [7:0] uw2;
input [7:0] uw3;
output sampler_tx;

reg sample;
time current_time;
always @(s0 or s1 or uw0 or uw1 or uw2 or uw3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module fourMux_vlg_check_tst (
	uy,
	sampler_rx
);
input [7:0] uy;
input sampler_rx;

reg [7:0] uy_expected;

reg [7:0] uy_prev;

reg [7:0] uy_expected_prev;

reg [7:0] last_uy_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	uy_prev = uy;
end

// update expected /o prevs

always @(trigger)
begin
	uy_expected_prev = uy_expected;
end


// expected uy[ 7 ]
initial
begin
	uy_expected[7] = 1'bX;
end 
// expected uy[ 6 ]
initial
begin
	uy_expected[6] = 1'bX;
end 
// expected uy[ 5 ]
initial
begin
	uy_expected[5] = 1'bX;
end 
// expected uy[ 4 ]
initial
begin
	uy_expected[4] = 1'bX;
end 
// expected uy[ 3 ]
initial
begin
	uy_expected[3] = 1'bX;
end 
// expected uy[ 2 ]
initial
begin
	uy_expected[2] = 1'bX;
end 
// expected uy[ 1 ]
initial
begin
	uy_expected[1] = 1'bX;
end 
// expected uy[ 0 ]
initial
begin
	uy_expected[0] = 1'bX;
end 
// generate trigger
always @(uy_expected or uy)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected uy = %b | ",uy_expected_prev);
	$display("| real uy = %b | ",uy_prev);
`endif
	if (
		( uy_expected_prev[0] !== 1'bx ) && ( uy_prev[0] !== uy_expected_prev[0] )
		&& ((uy_expected_prev[0] !== last_uy_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uy[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uy_expected_prev);
		$display ("     Real value = %b", uy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_uy_exp[0] = uy_expected_prev[0];
	end
	if (
		( uy_expected_prev[1] !== 1'bx ) && ( uy_prev[1] !== uy_expected_prev[1] )
		&& ((uy_expected_prev[1] !== last_uy_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uy[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uy_expected_prev);
		$display ("     Real value = %b", uy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_uy_exp[1] = uy_expected_prev[1];
	end
	if (
		( uy_expected_prev[2] !== 1'bx ) && ( uy_prev[2] !== uy_expected_prev[2] )
		&& ((uy_expected_prev[2] !== last_uy_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uy[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uy_expected_prev);
		$display ("     Real value = %b", uy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_uy_exp[2] = uy_expected_prev[2];
	end
	if (
		( uy_expected_prev[3] !== 1'bx ) && ( uy_prev[3] !== uy_expected_prev[3] )
		&& ((uy_expected_prev[3] !== last_uy_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uy[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uy_expected_prev);
		$display ("     Real value = %b", uy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_uy_exp[3] = uy_expected_prev[3];
	end
	if (
		( uy_expected_prev[4] !== 1'bx ) && ( uy_prev[4] !== uy_expected_prev[4] )
		&& ((uy_expected_prev[4] !== last_uy_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uy[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uy_expected_prev);
		$display ("     Real value = %b", uy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_uy_exp[4] = uy_expected_prev[4];
	end
	if (
		( uy_expected_prev[5] !== 1'bx ) && ( uy_prev[5] !== uy_expected_prev[5] )
		&& ((uy_expected_prev[5] !== last_uy_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uy[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uy_expected_prev);
		$display ("     Real value = %b", uy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_uy_exp[5] = uy_expected_prev[5];
	end
	if (
		( uy_expected_prev[6] !== 1'bx ) && ( uy_prev[6] !== uy_expected_prev[6] )
		&& ((uy_expected_prev[6] !== last_uy_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uy[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uy_expected_prev);
		$display ("     Real value = %b", uy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_uy_exp[6] = uy_expected_prev[6];
	end
	if (
		( uy_expected_prev[7] !== 1'bx ) && ( uy_prev[7] !== uy_expected_prev[7] )
		&& ((uy_expected_prev[7] !== last_uy_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uy[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uy_expected_prev);
		$display ("     Real value = %b", uy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_uy_exp[7] = uy_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#40000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module fourMux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg s0;
reg s1;
reg [7:0] uw0;
reg [7:0] uw1;
reg [7:0] uw2;
reg [7:0] uw3;
// wires                                               
wire [7:0] uy;

wire sampler;                             

// assign statements (if any)                          
fourMux i1 (
// port map - connection between master ports and signals/registers   
	.s0(s0),
	.s1(s1),
	.uw0(uw0),
	.uw1(uw1),
	.uw2(uw2),
	.uw3(uw3),
	.uy(uy)
);

// s0
initial
begin
	s0 = 1'b0;
	s0 = #6000 1'b1;
	s0 = #8000 1'b0;
	s0 = #8000 1'b1;
	s0 = #10000 1'b0;
end 

// s1
initial
begin
	s1 = 1'b0;
	s1 = #14000 1'b1;
	s1 = #18000 1'b0;
end 
// uw0[ 7 ]
initial
begin
	uw0[7] = 1'b0;
end 
// uw0[ 6 ]
initial
begin
	uw0[6] = 1'b0;
end 
// uw0[ 5 ]
initial
begin
	uw0[5] = 1'b0;
	uw0[5] = #2000 1'b1;
	uw0[5] = #2000 1'b0;
end 
// uw0[ 4 ]
initial
begin
	uw0[4] = 1'b0;
	uw0[4] = #2000 1'b1;
	uw0[4] = #2000 1'b0;
end 
// uw0[ 3 ]
initial
begin
	uw0[3] = 1'b0;
end 
// uw0[ 2 ]
initial
begin
	uw0[2] = 1'b0;
end 
// uw0[ 1 ]
initial
begin
	uw0[1] = 1'b0;
	uw0[1] = #4000 1'b1;
	uw0[1] = #2000 1'b0;
end 
// uw0[ 0 ]
initial
begin
	uw0[0] = 1'b0;
end 
// uw1[ 7 ]
initial
begin
	uw1[7] = 1'b1;
	uw1[7] = #2000 1'b0;
	uw1[7] = #6000 1'b1;
	uw1[7] = #2000 1'b0;
	uw1[7] = #2000 1'b1;
	uw1[7] = #2000 1'b0;
end 
// uw1[ 6 ]
initial
begin
	uw1[6] = 1'b1;
	uw1[6] = #2000 1'b0;
	uw1[6] = #6000 1'b1;
	uw1[6] = #2000 1'b0;
	uw1[6] = #2000 1'b1;
	uw1[6] = #2000 1'b0;
end 
// uw1[ 5 ]
initial
begin
	uw1[5] = 1'b1;
	uw1[5] = #2000 1'b0;
	uw1[5] = #6000 1'b1;
	uw1[5] = #2000 1'b0;
	uw1[5] = #2000 1'b1;
	uw1[5] = #2000 1'b0;
end 
// uw1[ 4 ]
initial
begin
	uw1[4] = 1'b1;
	uw1[4] = #2000 1'b0;
	uw1[4] = #6000 1'b1;
	uw1[4] = #2000 1'b0;
	uw1[4] = #2000 1'b1;
	uw1[4] = #2000 1'b0;
end 
// uw1[ 3 ]
initial
begin
	uw1[3] = 1'b1;
	uw1[3] = #2000 1'b0;
	uw1[3] = #6000 1'b1;
	uw1[3] = #2000 1'b0;
end 
// uw1[ 2 ]
initial
begin
	uw1[2] = 1'b1;
	uw1[2] = #2000 1'b0;
	uw1[2] = #6000 1'b1;
	uw1[2] = #2000 1'b0;
end 
// uw1[ 1 ]
initial
begin
	uw1[1] = 1'b1;
	uw1[1] = #2000 1'b0;
	uw1[1] = #6000 1'b1;
	uw1[1] = #2000 1'b0;
end 
// uw1[ 0 ]
initial
begin
	uw1[0] = 1'b1;
	uw1[0] = #2000 1'b0;
	uw1[0] = #6000 1'b1;
	uw1[0] = #2000 1'b0;
end 
// uw2[ 7 ]
initial
begin
	uw2[7] = 1'b0;
	uw2[7] = #20000 1'b1;
	uw2[7] = #2000 1'b0;
end 
// uw2[ 6 ]
initial
begin
	uw2[6] = 1'b0;
	uw2[6] = #20000 1'b1;
	uw2[6] = #2000 1'b0;
end 
// uw2[ 5 ]
initial
begin
	uw2[5] = 1'b0;
	uw2[5] = #14000 1'b1;
	uw2[5] = #2000 1'b0;
	uw2[5] = #4000 1'b1;
	uw2[5] = #2000 1'b0;
end 
// uw2[ 4 ]
initial
begin
	uw2[4] = 1'b0;
	uw2[4] = #16000 1'b1;
	uw2[4] = #2000 1'b0;
	uw2[4] = #2000 1'b1;
	uw2[4] = #2000 1'b0;
end 
// uw2[ 3 ]
initial
begin
	uw2[3] = 1'b0;
	uw2[3] = #16000 1'b1;
	uw2[3] = #2000 1'b0;
	uw2[3] = #2000 1'b1;
	uw2[3] = #2000 1'b0;
end 
// uw2[ 2 ]
initial
begin
	uw2[2] = 1'b0;
	uw2[2] = #16000 1'b1;
	uw2[2] = #2000 1'b0;
end 
// uw2[ 1 ]
initial
begin
	uw2[1] = 1'b0;
end 
// uw2[ 0 ]
initial
begin
	uw2[0] = 1'b0;
end 
// uw3[ 7 ]
initial
begin
	uw3[7] = 1'b0;
end 
// uw3[ 6 ]
initial
begin
	uw3[6] = 1'b0;
	uw3[6] = #24000 1'b1;
	uw3[6] = #2000 1'b0;
end 
// uw3[ 5 ]
initial
begin
	uw3[5] = 1'b0;
	uw3[5] = #24000 1'b1;
	uw3[5] = #2000 1'b0;
end 
// uw3[ 4 ]
initial
begin
	uw3[4] = 1'b0;
	uw3[4] = #24000 1'b1;
	uw3[4] = #2000 1'b0;
end 
// uw3[ 3 ]
initial
begin
	uw3[3] = 1'b0;
	uw3[3] = #24000 1'b1;
	uw3[3] = #2000 1'b0;
end 
// uw3[ 2 ]
initial
begin
	uw3[2] = 1'b0;
	uw3[2] = #24000 1'b1;
	uw3[2] = #2000 1'b0;
end 
// uw3[ 1 ]
initial
begin
	uw3[1] = 1'b0;
end 
// uw3[ 0 ]
initial
begin
	uw3[0] = 1'b0;
end 

fourMux_vlg_sample_tst tb_sample (
	.s0(s0),
	.s1(s1),
	.uw0(uw0),
	.uw1(uw1),
	.uw2(uw2),
	.uw3(uw3),
	.sampler_tx(sampler)
);

fourMux_vlg_check_tst tb_out(
	.uy(uy),
	.sampler_rx(sampler)
);
endmodule

